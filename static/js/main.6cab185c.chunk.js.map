{"version":3,"sources":["components/atoms/Input.jsx","components/atoms/Switch.jsx","components/atoms/RangeSlider.jsx","components/molecules/Controls.jsx","components/molecules/Graph.jsx","components/organisms/MainPage.jsx","App.js","serviceWorker.js","index.js"],"names":["Input","props","StyledInput","label","variant","styled","TextField","defaultProps","placeholder","value","onChange","CustomSwitch","onHeaderValue","offHeaderValue","className","Typography","component","StyledContainer","container","alignItems","Grid","item","Switch","checked","getText","RangeSlider","Content","gutterBottom","Slider","getAriaValueText","valueLabelDisplay","aria-labelledby","div","Controls","formula","onChangeFormula","type","onChangeType","onChangeRange","rangeValue","StyledControls","Graph","this","axis","width","points","height","halfWidth","range","halfHeight","offsetX","offsetY","stroke","strokeWidth","radius","fill","tension","Component","window","innerWidth","MainPage","state","event","setState","target","React","memo","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6cab185c.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport TextField from '@material-ui/core/TextField';\n\nconst Input = (props) => <StyledInput {...props} label=\"Formula\" variant=\"outlined\" />;\n\nconst StyledInput = styled(TextField)`\n  flex: 1 1 100%;\n  height: 38px;\n  font-size: 16px;\n  line-height: 1.38;\n`;\n\nInput.propTypes = {\n  placeholder: PropTypes.string,\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\nInput.defaultProps = {\n  placeholder: 'Enter...',\n  value: '',\n  onChange: () => null,\n};\n\nexport default Input;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Switch, Typography, Grid } from '@material-ui/core';\nimport styled from 'styled-components';\n\nconst CustomSwitch = ({ value, onChange, onHeaderValue, offHeaderValue, className }) =>\n  <Typography component=\"div\" className={className}>\n    <StyledContainer component=\"label\" container alignItems=\"center\">\n      <Grid item>{onHeaderValue}</Grid>\n      <Grid item>\n        <Switch\n          checked={value}\n          onChange={onChange}\n        />\n      </Grid>\n      <Grid item>{offHeaderValue}</Grid>\n    </StyledContainer>\n  </Typography>;\n\nconst StyledContainer = styled(Grid)`\n  justify-content: center;\n  align-items: center;\n  height: inherit;\n`;\n\nCustomSwitch.propTypes = {\n  value: PropTypes.bool,\n  onHeaderValue: PropTypes.string,\n  offHeaderValue: PropTypes.string,\n  onChange: PropTypes.func\n};\n\nCustomSwitch.defaultProps = {\n  value: '',\n  onHeaderValue: 'On',\n  offHeaderValue: 'Off',\n  onChange: () => null,\n};\n\nexport default CustomSwitch;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\nimport styled from 'styled-components';\n\nconst getText = (value) => `${value}`;\n\nconst RangeSlider = (props) =>\n  <Content>\n    <Typography className='text' gutterBottom> Value\n    </Typography>\n    <Slider\n      getAriaValueText={getText}\n      valueLabelDisplay=\"auto\"\n      aria-labelledby=\"range-slider\"\n      {...props}\n    />\n  </Content>;\n\nconst Content = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 400px;\n  \n  .text {\n    margin: 0 20px;  \n  }\n`;\n\nRangeSlider.propTypes = {\n  onChange: PropTypes.func,\n  value: PropTypes.array,\n};\n\nRangeSlider.defaultProps = {\n  onChange: () => null,\n  value: [],\n};\n\nexport default RangeSlider;\n\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Input from '../atoms/Input';\nimport Switch from '../atoms/Switch';\nimport styled from 'styled-components';\nimport RangeSlider from '../atoms/RangeSlider';\n\nconst Controls = ({\n  formula,\n  onChangeFormula,\n  type,\n  onChangeType,\n  offHeaderValue,\n  onHeaderValue,\n  onChangeRange,\n  rangeValue\n}) =>\n  <StyledControls>\n    <Input value={formula} onChange={onChangeFormula} />\n    <RangeSlider\n      onChange={onChangeRange}\n      value={rangeValue}\n    />\n    <CustomSwitch\n      value={type}\n      offHeaderValue={offHeaderValue}\n      onHeaderValue={onHeaderValue}\n      onChange={onChangeType}\n    />\n  </StyledControls>;\n\nconst StyledControls = styled.div`\n  margin: 20px 0;\n  display: flex;\n  justify-content: space-between;\n  height: 57px;\n`;\n\nconst CustomSwitch = styled(Switch)`\n  width: 230px;\n  padding-left: 10px;\n  height: inherit;\n`;\n\nControls.propTypes = {\n  formula: PropTypes.string,\n  offHeaderValue: PropTypes.string,\n  onHeaderValue: PropTypes.string,\n  type: PropTypes.bool,\n  onChangeFormula: PropTypes.func,\n  onChangeType: PropTypes.func,\n  onChangeRange: PropTypes.func,\n  rangeValue: PropTypes.array,\n};\n\nControls.defaultProps = {\n  formula: '',\n  offHeaderValue: 'Custom',\n  onHeaderValue: 'Wolfram',\n  type: false,\n  onChangeFormula: () => null,\n  onChangeType: () => null,\n  onChangeRange: () => null,\n  rangeValue: [],\n};\n\nexport default Controls;","import React, { Fragment, Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Stage, Layer, Line, Circle } from 'react-konva';\n\nclass Graph extends Component {\n  render() {\n    const {\n      axis,\n      points,\n      width,\n      height,\n      range\n    } = this.props;\n    const halfWidth = width / 2;\n    const halfHeight = height / 2;\n\n    return (\n      <Stage width={width} height={height}>\n        <Layer offsetX={-halfWidth} offsetY={-200}>\n          {\n            axis &&\n            <Fragment>\n              <Line\n                points={[-halfWidth, 0, halfWidth, 0]}\n                stroke='black'\n                strokeWidth={2}\n              />\n              <Line\n                points={[0, halfHeight, 0, -halfHeight]}\n                stroke='black'\n                strokeWidth={2}\n              />\n              <Circle\n                radius={10}\n                stroke='black'\n                strokeWidth={1}\n                fill='black'\n              />\n            </Fragment>\n\n          }\n          <Line\n            points={[0, 0, 100, 0, 100, 100]}\n            tension={0.5}\n            stroke=\"black\"\n          />\n        </Layer>\n      </Stage>\n    );\n  }\n}\n\nGraph.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  points: PropTypes.array,\n  axis: PropTypes.bool,\n  range: PropTypes.array,\n  formula: PropTypes.string,\n};\n\nGraph.defaultProps = {\n  width: window.innerWidth,\n  height: 600,\n  points: [],\n  axis: true,\n  range: [],\n  formula: '',\n};\n\nexport default Graph;","import React from 'react';\nimport Controls from '../molecules/Controls';\nimport Graph from '../molecules/Graph';\n\nclass MainPage extends React.Component {\n  state = {\n    formula: '',\n    type: true,\n    range: [ 20, 40 ],\n  };\n\n  onChangeFormula = (event) => this.setState({formula : event.target.value});\n\n  onChangeType = (event) => this.setState({type : event.target.checked});\n\n  onChangeRange = (event, range) => this.setState({range});\n\n  render() {\n    const { formula, type, range } = this.state;\n    return (\n      <div>\n        <Controls\n          formula={formula}\n          type={type}\n          onChangeFormula={this.onChangeFormula}\n          onChangeType={this.onChangeType}\n          onChangeRange={this.onChangeRange}\n          rangeValue={range}\n        />\n        <Graph\n          range={range}\n          formula={formula}\n        />\n      </div>\n    );\n  }\n}\n\nMainPage.propTypes = {};\n\nexport default MainPage;","import React, { memo } from 'react';\nimport MainPage from './components/organisms/MainPage';\n\nconst App = () =>  <MainPage />;\n\nexport default memo(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}